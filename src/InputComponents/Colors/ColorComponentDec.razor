@inject IJSRuntime Js

<input type="number" min="@_min" max="@_max" class="color-picker__component-input" value="@Value"
       @ref="@_reference" @oninput="@UpdateValue" />

@code {
    /// <summary>
    /// Value of single color component (scalar value) of base 10.
    /// </summary>
    /// See <see cref="ColorComponentHex"/> for base 16 value.
    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    private readonly int _min = 0;
    private readonly int _max = 255;

    private ElementReference _reference;

    private async Task UpdateValue(ChangeEventArgs args)
    {
        var oldValue = Value;
        var newValue = args!.Value!.ToString();
        if (string.IsNullOrWhiteSpace(newValue))
        {
            Value = _min;
        }
        else if (int.TryParse(newValue, out var num))
        {
            Value = Math.Clamp(num, _min, _max);
        }

        await Js.InvokeVoidAsync("setElementValue", _reference, "value", Value);

        if (oldValue != Value)
        {
            await OnValueChanged();
        }
    }

    private async Task OnValueChanged()
    {
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
