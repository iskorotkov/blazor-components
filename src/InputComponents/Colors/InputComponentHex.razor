@using System.Text.RegularExpressions
@using System.Globalization 

@inject IJSRuntime Js

<input type="text" pattern="@_pattern" class="color-picker__component-input" value="@DecToHex(Value)"
       @ref="_reference" @oninput="@OnValueChanged" />

@code {
    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    private readonly string _pattern;
    private readonly Regex _regex;

    private ElementReference _reference;

    public InputComponentHex()
    {
        _pattern = @"^[0-9A-F]+$";
        _regex = new Regex(_pattern, RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.CultureInvariant);
    }

    private async Task OnValueChanged(ChangeEventArgs args)
    {
        var value = args!.Value!.ToString();
        Value = _regex.IsMatch(value!) ? HexToDec(value) : Value;

        await Js.InvokeVoidAsync("setElementValue", _reference, "value", DecToHex(Value));

        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private int HexToDec(string value)
    {
        var result = int.Parse(value, NumberStyles.HexNumber);
        return Math.Clamp(result, 0, 255);
    }

    private string DecToHex(int value)
    {
        return value.ToString("X2");
    }
}
